/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-unused-vars */
/* eslint-disable @typescript-eslint/no-unused-vars */
import Stripe from "stripe";
import { Tenant } from "../owner/owner.module";
import { OwnerPayout, TenantPayment } from "./payment.module";
import { TOwnerPayOut } from "./payment.interface";
import config from "../../config";

const stripe = new Stripe(config.stripe_test_secret_key as string);

const stripeTenantPaymentFun = async (paymentData: any) => {
    const { paymentMethodId, amount, lateFee, monthlyPaymentId, ownerId } = paymentData;

    try {
        const paymentIntent = await stripe.paymentIntents.create({
            amount: Math.round(amount * 100), // Ensure cents conversion
            currency: "usd",
            payment_method: paymentMethodId,
            payment_method_types: ["card"],
            confirm: true,
            metadata: {
                monthlyPaymentId,
                ownerId,
                lateFee,
            },
        });

        return { success: true, paymentIntent };
    } catch (err: any) {
        console.error("Stripe Error:", err);
        return { success: false, error: err.message || "Payment failed" };
    }
};

const createAllTenantsForPaymentFormDB = async () => {
    try {
        const tenants = await Tenant.find({ isDeleted: false }).lean();
        if (!tenants.length) throw new Error("No tenants found");

        const payments = tenants.map(tenant => ({
            ...tenant,
            status: "Pending",
            invoice: "Upcoming",
        }));

        const result = await TenantPayment.insertMany(payments);
        return result;
    } catch (error) {
        console.error("Error inserting tenant payments:", error);
        throw error;
    }
};

const getAllTenantPaymentDataFromDB = async () => {
    return await TenantPayment.find().sort({ createdAt: -1 }).lean();
};

const getSingleUserAllPaymentDataFromDB = async (userId: string) => {
    return await TenantPayment.find({ userId })
        .populate([{ path: "userId" }, { path: "unitId" }, { path: "propertyId" }])
        .sort({ status: 1, updatedAt: -1, createdAt: -1 })
        .lean();
};

// =========================== PAYOUT FUNCTIONS ===========================

const getPayoutDataFromDBbySingleOwner = async (ownerId: string) => {
    return await OwnerPayout.find({ ownerId }).sort({ createdAt: -1 }).lean();
};

const createPayoutByOwnerIntoDB = async (payload: TOwnerPayOut) => {
    return await OwnerPayout.create(payload);
};

const getPayoutDataFromDBbyAdmin = async () => {
    return await OwnerPayout.find().sort({ createdAt: -1 }).lean();
};


export const createConnectedAccount = async (email: string) => {
    try {
        const connectedAccount = await stripe.accounts.create({
            type: "express",
            email,
            country: "US",
            capabilities: {
                transfers: { requested: true },
            },
        });

        return connectedAccount;
    } catch (error: any) {
        console.error("Error creating connected account:", error);
        throw new Error(error.message || "Failed to create connected account");
    }
};

export const createOnboardingLink = async (accountId: string) => {
    console.log(100, accountId);
    
    try {
        const accountLink = await stripe.accountLinks.create({
            account: accountId,
            refresh_url: `${config.frontend_url}/stripe/refresh`,
            return_url: `${config.frontend_url}/success`,
            type: "account_onboarding",
        });
        
        console.log(110, accountLink);
        return accountLink.url;
    } catch (error: any) {
        console.error("Error creating onboarding link:", error);
        throw new Error(error.message || "Failed to create onboarding link");
    }
};

const createPayout = async (accountId: string, amount: number) => {
    try {
        const transfer = await stripe.transfers.create({
            amount: Math.round(amount * 100), 
            currency: "usd",
            destination: accountId,
        });

        return transfer;
    } catch (error: any) {
        console.error("Error creating payout:", error);
        throw new Error(error.message || "Failed to create payout");
    }
};

const sendPayoutRequestByAdminToStripe = async (data: any) => {
    try {
        console.log("🚀 Processing payout request:", data);

        const { email, amount, accountId } = data;

        let connectedAccount;
        try {
            connectedAccount = await stripe.accounts.retrieve(accountId);
        } catch {
            connectedAccount = await createConnectedAccount(email);
        }

        console.log(146, connectedAccount);
        

        const onboardingUrl = await createOnboardingLink(connectedAccount.id);

        console.log(151,  onboardingUrl);
        
        // if (!connectedAccount.details_submitted) {            
        //     return { success: false, message: "⚠️ Account needs onboarding", onboardingUrl };
        // }

        // Check available balance
        // const balance = await stripe.balance.retrieve();
        // const availableBalance = balance.available.find(b => b.currency === "usd")?.amount || 0;

        // if (availableBalance < amount * 100) {
        //     return { success: false, message: "❌ Insufficient funds in platform balance" };
        // }

        // // Send payout
        // const payout = await createPayout(connectedAccount.id, amount);

        // console.log("✅ Payout Successful:", payout);

        return { success: true, result: null, message: "✅ Payout processed successfully!" };
        // return { success: true, result: payout, message: "✅ Payout processed successfully!" };
    } catch (error: any) {
        console.error("🔥 Payout Error:", error);
        return { success: false, message: "❌ Error processing payout", error: error.message };
    }
};

// Check Stripe account balance
const checkStripeBalance = async () => {
    try {
        const balance = await stripe.balance.retrieve();
        console.log("Stripe Balance:", balance);
        return balance;
    } catch (error: any) {
        console.error("Error retrieving balance:", error);
    }
};

// Export payment service functions
export const paymentService = {
    stripeTenantPaymentFun,
    createAllTenantsForPaymentFormDB,
    getAllTenantPaymentDataFromDB,
    getSingleUserAllPaymentDataFromDB,
    getPayoutDataFromDBbySingleOwner,
    createPayoutByOwnerIntoDB,
    getPayoutDataFromDBbyAdmin,
    sendPayoutRequestByAdminToStripe,
    checkStripeBalance,
};
